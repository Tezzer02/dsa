#include <iostream>
//#include <bits/stdc++.h>

using namespace std;


class Node{
    public:
        char data;
        Node* next;
    Node(char a){
        this->data=a;
        this->next=NULL;
    }
    ~Node(){
        int value=this->data;
        if(this->next!=NULL){
            delete next;
            this->next=NULL;
        }
        cout<<"You deleted the value : "<<value<<endl;

    }

};

class Stack{
   
    public:
    Node* top;
    Stack(){
        top=NULL;
    }

    // Push Data
    void push(char data){
        Node* temp=new Node(data);
        if(!temp){
            cout<<"\n Stack is OverFlow"<<endl;
            exit(1);
        }

        // insert the data
        temp->data=data;
        // Assign the top to next
        temp->next=top;
        // Update the Top
        top=temp;


    }
    bool isEmpty(){
        if(top==NULL){
            return true;
        } else{
            return false;

        }
    }
    int peek(){
        if(!isEmpty()){
            return top->data;
        }
        else{
            exit(1);
        }
    }

    void pop(){
        Node* temp;
    if(top==NULL){
        cout<<"\n Stack is the UnderFlow"<<endl;
        exit(1);
    }
    else{
        temp=top;

        top=temp->next;

        temp->next=NULL;
    // delete the top
        delete temp;
    }
    }
    void display(){
        if(top==NULL){
            cout<<"\n Stack is Empty"<<endl;
            exit(1);

        }
        else{
        	Node* temp;
            temp=top;
            while(temp->next!=NULL){
                cout<<temp->data<<endl;

                temp=temp->next;
            }
        }
    }
};

int prec(char c)
{
	if (c == '^')
		return 3;
	else if (c == '/' || c == '*')
		return 2;
	else if (c == '+' || c == '-')
		return 1;
	else
		return -1;
}

// The main function to convert infix expression
// to postfix expression
void infixToPostfix(string s)
{

	Stack st; // For stack operations, we are using
					// C++ built in stack
	string result;

	for (int i = 0; i < s.length(); i++) {
		char c = s[i];

		// If the scanned character is
		// an operand, add it to output string.
		if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')
			|| (c >= '0' && c <= '9'))
			result += c;

		// If the scanned character is an
		// ‘(‘, push it to the stack.
		else if (c == '(')
			st.push('(');

		// If the scanned character is an ‘)’,
		// pop and to output string from the stack
		// until an ‘(‘ is encountered.
		else if (c == ')') {
			while (st.peek() != '(') {
				result += st.peek();
				st.pop();
			}
			st.pop();
		}

		// If an operator is scanned
		else {
			while (!st.isEmpty()
				&& prec(s[i]) <= prec(st.peek())) {
				result += st.peek();
				st.pop();
			}
			st.push(c);
		}
	}

	// Pop all the remaining elements from the stack
	while (!st.isEmpty()) {
		result += st.peek();
		st.pop();
	}

	cout << result << endl;
}



int main(){
    
//    Stack s;
//    
//        // Push the elements of stack
//        
//        s.Push(11);
//		s.Push(11);
//        s.Push(22);
//        s.Push(33);
//        s.Push(44);
//    
//        // Display stack elements
//        s.display();
//    
//        // Print top element of stack
//        cout << "\nTop element is " << s.peek() << endl;
//    
//        // Delete top elements of stack
//        s.Pop();
//        s.Pop();
//    
//        // Display stack elements
//        s.display();
//    
//        // Print top element of stack
//        cout << "\nTop element is " << s.peek() << endl;


string exp = "a+b*(c^d-e)^(f+g*h)-i";
string exp1="a+b*c/d-q";

	// Function call
	infixToPostfix(exp);
	infixToPostfix(exp1);
    
        return 0;
    
}